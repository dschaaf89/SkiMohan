datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Season {
  id          String       @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]  @relation("SeasonToBillboard")
  students    Student[]    @relation("SeasonToStudent")
  instructors Instructor[] @relation("SeasonToInstructor")
  classes     Classes[]    @relation("SeasonToClasses")
  programs    Program[]    @relation("SeasonToProgram")
  products    Product[]    @relation("SeasonToProduct")
  types       Type[]       @relation("SeasonToType")
  orders      Order[]      @relation("SeasonToOrder")
  volunteers  Volunteer[]  @relation("SeasonToVolunteer")
  createAt    DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Billboard {
  id       String   @id @default(uuid())
  seasonId String
  season   Season   @relation("SeasonToBillboard", fields: [seasonId], references: [id])
  label    String
  imageUrl String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([seasonId])
}

model Student {
  id            String   @id @default(uuid())
  season        Season   @relation("SeasonToStudent", fields: [seasonId], references: [id])
  seasonId      String
  UniqueID      String   @map("UniqueID")
  NAME_FIRST    String   @map("NAME_FIRST")
  NAME_LAST     String   @map("NAME_LAST")
  HOME_TEL      String   @map("HOME_TEL")
  ADDRESS       String   @map("ADDRESS")
  CITY          String   @map("CITY")
  STATE         String   @map("STATE")
  ZIP           String   @map("ZIP")
  student_tel   String   @map("student_tel")
  Email_student String?  @map("Email_student")
  BRTHD         DateTime @map("DOB")
  GradeLevel    String?  @map("GradeLevel")
  APPLYING_FOR  String?  @map("APPLYING_FOR")
  AGE           Int      @map("AGE")
  LEVEL         String?  @map("LEVEL")
  Approach      String?  @map("Approach")
  E_mail_main   String?  @map("E_mail_main")
  E_NAME        String?  @map("E_NAME")
  E_TEL         String?  @map("E_TEL")
  CCPayment     String?  @map("CCPayment")
  ProgCode      String?  @map("ProgCode")
  BUDDY         String?  @map("BUDDY")
  WComment      String?  @map("WComment")
  DateFeePaid   String?  @map("DateFeePaid")
  PaymentStatus String?  @map("PaymentStatus")
  AcceptedTerms String?  @map("AcceptedTerms")
  AppType       Int?     @map("AppType")
  Employer      String?  @map("Employer")
  C_TEL         String?  @map("C_TEL")
  Occupation    String?  @map("Occupation")
  W_TEL         String?  @map("W_TEL")
  AGE_GROUP     Int?     @map("AGE_GROUP")
  AGRESSIVENESS String?  @map("AGRESSIVENESS")
  GENDER        String?  @map("GENDER")
  FeeComment    String?  @map("FeeComment")
  DAY           String?  @map("Day")
  StartTime     String?  @map("StartTime")
  EndTime       String?  @map("EndTime")
  createAt      DateTime @default(now())
  updateAt      DateTime @updatedAt
  classID       Int?     @map("classID")
  meetColor     String?  @map("meetColor")
  meetingPoint  Int?     @map("meetingPoint")
  status        String   @default("Registered") @map("status")

  @@index([classID])
  @@index([seasonId])
  @@index([ProgCode])
}

model Instructor {
  id                  String                @id @default(uuid())
  season              Season                @relation("SeasonToInstructor", fields: [seasonId], references: [id])
  seasonId            String
  UniqueID            String                @map("UniqueID")
  NAME_FIRST          String                @map("NAME_FIRST")
  NAME_LAST           String                @map("NAME_LAST")
  HOME_TEL            String                @map("HOME_TEL")
  C_TEL               String?               @map("C_TEL")
  BRTHD               DateTime              @map("BRTHD")
  AGE                 Int                   @map("AGE")
  E_mail_main         String                @map("E_mail_main")
  ADDRESS             String                @map("ADDRESS")
  CITY                String                @map("CITY")
  STATE               String                @map("STATE")
  ZIP                 String                @map("ZIP")
  STATUS              String?               @map("STATUS")
  COMMENTS            String?               @map("COMMENTS")
  prevYear            String?               @map("prevYear")
  dateReg             String?               @map("dateReg")
  dateConfirmed       String?               @map("dateConfirmed")
  emailCommunication  Boolean?              @map("emailCommunication")
  InstructorType      String?               @map("InstructorType")
  PSIA                String?               @map("PSIA")
  AASI                String?               @map("AASI")
  testScore           String?               @map("testScore")
  ParentAuth          Boolean?              @map("ParentAuth")
  OverNightLodge      Boolean?              @map("OverNightLodge")
  ageRequestByStaff   Json?                 @map("ageRequestByStaff")
  clinicInstructor    Boolean?              @map("clinicInstructor")
  Supervisor          Boolean?              @map("Supervisor")
  skiLevel            String?               @map("skiLevel")
  boardLevel          String?               @map("boardLevel")
  skiMinAge           String?               @map("skiMinAge")
  skiMaxAge           String?               @map("skiMaxAge")
  boardMinAge         String?               @map("boardMinAge")
  boardMaxAge         String?               @map("boardMaxAge")
  married             Boolean?              @map("married")
  resume              String?               @map("resume")
  spouseName          String?               @map("spouseName")
  instructorCom       String?               @map("instructorCom")
  noteToInstructor    String?               @map("noteToInstructor")
  priority            String?               @map("priority")
  dateAssigned        String?               @map("dateAssigned")
  assignmentConfirmed String?               @map("assignmentConfrimed")
  classSignedUp       String?               @map("classSignedUp")
  classAssigned       String?               @map("classAssigned")
  permSub             Boolean?              @map("permSub")
  back2Back           Boolean?              @map("back2back")
  classPerWeek        String?               @map("classPerWeek")
  createAt            DateTime?             @default(now())
  updateAt            DateTime?             @updatedAt
  dateTimes           String?               @map("dateTimes")
  employeeNumber      String?               @map("employeeNumber")
  payRate             String?               @map("payRate")
  deductions          String?               @map("deductions")
  payCheckNo          String?               @map("payCheckNo")
  payCheckDate        String?               @map("payCheckDate")
  payAdvance          String?               @map("payAdvance")
  payComment          String?               @map("payComment")
  ssn                 String?               @map("ssn")
  payType             String?               @map("payType")
  dateFeePaid         String?               @map("dateFeePaid")
  disclosureForm      Boolean?              @map("disclosureForm")
  i9Form              Boolean?              @map("i9Form")
  w4Recieved          Boolean?              @map("w4Recieved")
  WSPRecieved         Boolean?              @map("WSPRecieved")
  testRecieved        Boolean?              @map("testRecieved")
  idRecieved          Boolean?              @map("idRecieved")
  schoolPermission    Boolean?              @map("schoolPermission")
  WSPDate             String?               @map("WSPDate")
  clinics             Json?                 @map("clinics")
  classTimes          InstructorClassTime[] @relation("InstructorToClassTime")
  classes             Classes[]             @relation("InstructorToClasses")
  classesAsAssistant  Classes[]             @relation("AssistantToClasses")

  @@index([seasonId])
}

model ClassTime {
  id              Int                   @id @default(autoincrement())
  label           String                @unique
  day             String
  startTime       DateTime
  endTime         DateTime
  instructorTimes InstructorClassTime[] @relation("ClassToInstructorClassTime")
  // Add additional fields as necessary, such as description, capacity, etc.
}

model InstructorClassTime {
  instructor   Instructor @relation("InstructorToClassTime", fields: [instructorId], references: [id], onDelete: Cascade)
  classTime    ClassTime? @relation("ClassToInstructorClassTime", fields: [classTimeId], references: [id], onDelete: Cascade)
  instructorId String
  classTimeId  Int

  @@id([instructorId, classTimeId])
  @@index([instructorId])
  @@index([classTimeId])
}

model Classes {
  season          Season      @relation("SeasonToClasses", fields: [seasonId], references: [id])
  seasonId        String
  classId         Int         @id @default(autoincrement())
  meetColor       String?     @map("meetColor")
  meetingPoint    Int?        @map("meetingPoint")
  students        Json        @map("students")
  day             String      @map("day")
  progCode        String      @map("progCode")
  discipline      String // Add this field
  numberStudents  Int
  Level           String?
  Age             Int? // Add this field
  instructorId    String?
  instructor      Instructor? @relation("InstructorToClasses", fields: [instructorId], references: [id])
  assistantId     String?
  assistant       Instructor? @relation("AssistantToClasses", fields: [assistantId], references: [id])
  startTime       String?
  endTime         String?
  instructorName  String?
  instructorPhone String?

  @@index([seasonId])
  @@index([instructorId])
  @@index([assistantId])
}

model Program {
  id        String    @id @default(uuid())
  seasonId  String // Foreign Key to Store
  season    Season    @relation("SeasonToProgram", fields: [seasonId], references: [id])
  imageUrl  String
  name      String
  products  Product[] @relation("ProgramToProduct")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([seasonId])
}

model Product {
  id         String      @id @default(uuid())
  seasonId   String // Foreign Key to Store
  season     Season      @relation("SeasonToProduct", fields: [seasonId], references: [id])
  programId  String // Foreign Key to Category
  program    Program     @relation("ProgramToProduct", fields: [programId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  typeId     String // Foreign Key to Size
  type       Type        @relation(fields: [typeId], references: [id])
  images     Image[] // Relation to Image model
  orderItems OrderItem[] // Relation to Order model
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([seasonId])
  @@index([programId])
  @@index([typeId])
}

model Type {
  id        String    @id @default(uuid())
  seasonId  String // Foreign Key to Store
  season    Season    @relation("SeasonToType", fields: [seasonId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([seasonId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  seasonId   String // Foreign Key to Store
  season     Season      @relation("SeasonToOrder", fields: [seasonId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  Name_First String      @default("")
  Name_Last  String      @default("")
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([seasonId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Volunteer {
  id                   String   @id @default(uuid())
  firstName            String
  lastName             String
  birthDate            DateTime
  homePhone            String
  mobilePhone          String
  workPhone            String
  Address              String
  city                 String
  state                String
  zipCode              String
  email                String   @unique
  employerSchool       String
  occupationGrade      String
  isGreeter            Boolean  @default(false)
  isProgramCoordinator Boolean  @default(false)
  isBusChaperone       Boolean  @default(false)
  busChaperoneSchool   String
  isEmergencyDriver    Boolean  @default(false)
  emergencyDriverDay   String
  applicantStatus      String // Can be "Returning" or "New"
  agreeToTerms         Boolean // True = Agreed, False = Not Agreed
  busChaperoneWk1      Boolean @default(false)
  busChaperoneWk2      Boolean @default(false)
  busChaperoneWk3      Boolean @default(false)
  busChaperoneWk4      Boolean @default(false)
  busChaperoneWk5      Boolean @default(false)
  busChaperoneWk6      Boolean @default(false)
  emergencyDriverWk1   Boolean @default(false)
  emergencyDriverWk2   Boolean @default(false)
  emergencyDriverWk3   Boolean @default(false)
  emergencyDriverWk4   Boolean @default(false)
  emergencyDriverWk5   Boolean @default(false)
  emergencyDriverWk6   Boolean @default(false)
  seasonId             String
  season               Season   @relation("SeasonToVolunteer", fields: [seasonId], references: [id])

  @@index([seasonId])
}
